.hero {
  margin: 0;
  width: 100vw;
  min-height: 100vh; // Ensures the hero section takes up at least the full viewport height
  overflow: visible; // Allows elements to overflow if necessary
  position: relative;
  z-index: 10; // Ensure hero section displays over other sections

  .animated-numbers {
    position: absolute;
    top: 2%; // Start even higher to cover more area
    bottom: 2%; // End even lower to cover more area
    z-index: 5;
    font-family: var(--title);
    font-size: 1rem; // Much smaller font for tighter fit
    font-weight: normal;
    color: var(--black);
    display: flex;
    flex-direction: column;
    gap: 0; // No gap between numbers
    justify-content: space-between; // Distribute numbers evenly across full height
    line-height: 0.2; // Extremely tight line height - almost touching

    &.left {
      left: 4rem;
    }

    &.right {
      right: 4rem;
    }

    .number {
      display: block;
      transition: all 0.1s ease-in-out; // Much faster transition
      animation: number-glow 1s ease-in-out infinite alternate; // Faster glow animation
      text-align: center;
      transform: rotate(90deg);
      transform-origin: center;
      flex-shrink: 0;
      margin: -0.3rem 0; // Negative margins to overlap numbers
      padding: 0; // Remove any default padding
      height: 0.4rem; // Very small height for tight packing
      overflow: visible; // Allow numbers to overlap slightly
    }

    .number:hover {
      color: var(--red);
      transform: rotate(90deg) scale(1.1);
    }
  }

  .container {
    position: relative;
    width: 100%;
    height: auto; // Allows the container height to adjust dynamically
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    .hero-content {
      height: auto; // Adjusts dynamically based on content
      margin-bottom: 2rem;
    }

    .hero-elements {
      width: 100%;
      height: auto; // Adjusts dynamically based on content
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      position: relative;

      div:not(:first-child) {
        position: absolute;
      }

      h4 {
        color: var(--red);
        font-size: 7rem; 
        letter-spacing: 0.8rem;
        margin: 0;
      }

      .moth img {
        width: 120rem;
        opacity: 0.7;  
        animation: pulse 3s ease-in-out infinite; 
      }

      .circle img {
        width: 60rem;
        opacity: 0.7; //
      }

      .animated-text {
        position: relative;
        width: 60rem;
        height: 60rem;
        display: flex;
        justify-content: center;
        align-items: center;

        img {
          width: 100%;
          height: auto;
          animation: rotate-clock 12s ease-in-out infinite; // Rotate 1/3 at a time with bounce
        }
      }
    }
  }

  .grid-bg {
    width: calc(100vw + 200px); // Extended width to ensure full coverage
    height: calc(100vh + 200px); // Extended height to ensure full coverage
    position: absolute;
    top: -100px; // Offset to ensure coverage at all animation points
    left: -100px; // Offset to ensure coverage at all animation points
    z-index: -1;
    overflow: hidden;
    opacity: 0.5; // Increased from 0.15 to make it more visible
    
    // Create the grid pattern using CSS gradients
    background-image: 
      linear-gradient(rgba(102, 102, 102, 1) 1px, transparent 1px),
      linear-gradient(90deg, rgba(102, 102, 102, 1) 1px, transparent 1px);
    background-size: 50px 50px; // Grid cell size
    animation: grid-move 15s linear infinite; // Infinite movement
    
    // Fade out bottom edge using mask
    mask: linear-gradient(to bottom, 
      rgba(0, 0, 0, 1) 0%, 
      rgba(0, 0, 0, 1) 70%, 
      rgba(0, 0, 0, 0) 100%
    );
    -webkit-mask: linear-gradient(to bottom, 
      rgba(0, 0, 0, 1) 0%, 
      rgba(0, 0, 0, 1) 70%, 
      rgba(0, 0, 0, 0) 100%
    );

  }
}

@keyframes number-glow {
  0% {
    opacity: 0.8;
  }
  100% {
    opacity: 1;
  }
}

@keyframes grid-move {
  0% {
    transform: translate(-50px, -50px); // Start position ensuring coverage
  }
  100% {
    transform: translate(0px, 0px); // End position for seamless loop
  }
}

@keyframes rotate-circle {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%,
  100% {
    transform: scale(1); // Default size
  }
  50% {
    transform: scale(1.02); // Slightly larger size
  }
}

@keyframes rotate-clock {
  0% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(120deg); // Rotate 1/3 of a circle
  }
  29% {
    transform: rotate(125deg); // Slight bounce backward
  }
  33% {
    transform: rotate(120deg); // Settle at the final position
  }
  58% {
    transform: rotate(240deg); // Rotate another 1/3
  }
  62% {
    transform: rotate(245deg); // Slight bounce backward
  }
  66% {
    transform: rotate(240deg); // Settle at the final position
  }
  91% {
    transform: rotate(360deg); // Complete the circle
  }
  95% {
    transform: rotate(365deg); // Slight bounce backward
  }
  100% {
    transform: rotate(360deg); // Seamless transition back to start
  }
}
